{
    "sourceFile": "src/main/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1702374319022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702374341192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+import { app, shell, BrowserWindow } from 'electron'\n+import { join } from 'path'\n+import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+import icon from '../../resources/icon.png?asset'\n+import updater from './update'\n+\n+function createWindow(): void {\n+  // Create the browser window.\n+  const mainWindow = new BrowserWindow({\n+    width: 900,\n+    height: 670,\n+    show: false,\n+    autoHideMenuBar: true,\n+    ...(process.platform === 'linux' ? { icon } : {}),\n+    webPreferences: {\n+      preload: join(__dirname, '../preload/index.js'),\n+      sandbox: false\n+    }\n+  })\n+\n+  mainWindow.on('ready-to-show', () => {\n+    mainWindow.show()\n+  })\n+\n+  mainWindow.webContents.setWindowOpenHandler((details) => {\n+    shell.openExternal(details.url)\n+    return { action: 'deny' }\n+  })\n+\n+  // HMR for renderer base on electron-vite cli.\n+  // Load the remote URL for development or the local html file for production.\n+  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n+    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n+  } else {\n+    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))\n+  }\n+  return mainWindow\n+}\n+\n+// This method will be called when Electron has finished\n+// initialization and is ready to create browser windows.\n+// Some APIs can only be used after this event occurs.\n+app.whenReady().then(() => {\n+  // Set app user model id for windows\n+  electronApp.setAppUserModelId('com.electron')\n+\n+  // Default open or close DevTools by F12 in development\n+  // and ignore CommandOrControl + R in production.\n+  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n+  app.on('browser-window-created', (_, window) => {\n+    optimizer.watchWindowShortcuts(window)\n+  })\n+\n+  const main = createWindow()\n+  updater(main)\n+\n+  app.on('activate', function () {\n+    // On macOS it's common to re-create a window in the app when the\n+    // dock icon is clicked and there are no other windows open.\n+    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n+  })\n+})\n+\n+// Quit when all windows are closed, except on macOS. There, it's common\n+// for applications and their menu bar to stay active until the user quits\n+// explicitly with Cmd + Q.\n+app.on('window-all-closed', () => {\n+  if (process.platform !== 'darwin') {\n+    app.quit()\n+  }\n+})\n+\n+// In this file you can include the rest of your app\"s specific main process\n+// code. You can also put them in separate files and require them here.\n"
                },
                {
                    "date": 1702374347121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import icon from '../../resources/icon.png?asset'\n import updater from './update'\n \n-function createWindow(): void {\n+function createWindow(): BrowserWindow {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n@@ -71,77 +71,4 @@\n })\n \n // In this file you can include the rest of your app\"s specific main process\n // code. You can also put them in separate files and require them here.\n-import { app, shell, BrowserWindow } from 'electron'\n-import { join } from 'path'\n-import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n-import icon from '../../resources/icon.png?asset'\n-import updater from './update'\n-\n-function createWindow(): void {\n-  // Create the browser window.\n-  const mainWindow = new BrowserWindow({\n-    width: 900,\n-    height: 670,\n-    show: false,\n-    autoHideMenuBar: true,\n-    ...(process.platform === 'linux' ? { icon } : {}),\n-    webPreferences: {\n-      preload: join(__dirname, '../preload/index.js'),\n-      sandbox: false\n-    }\n-  })\n-\n-  mainWindow.on('ready-to-show', () => {\n-    mainWindow.show()\n-  })\n-\n-  mainWindow.webContents.setWindowOpenHandler((details) => {\n-    shell.openExternal(details.url)\n-    return { action: 'deny' }\n-  })\n-\n-  // HMR for renderer base on electron-vite cli.\n-  // Load the remote URL for development or the local html file for production.\n-  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n-    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n-  } else {\n-    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))\n-  }\n-}\n-\n-// This method will be called when Electron has finished\n-// initialization and is ready to create browser windows.\n-// Some APIs can only be used after this event occurs.\n-app.whenReady().then(() => {\n-  // Set app user model id for windows\n-  electronApp.setAppUserModelId('com.electron')\n-\n-  // Default open or close DevTools by F12 in development\n-  // and ignore CommandOrControl + R in production.\n-  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n-  app.on('browser-window-created', (_, window) => {\n-    optimizer.watchWindowShortcuts(window)\n-  })\n-\n-  const main = createWindow()\n-  updater(main)\n-\n-  app.on('activate', function () {\n-    // On macOS it's common to re-create a window in the app when the\n-    // dock icon is clicked and there are no other windows open.\n-    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n-  })\n-})\n-\n-// Quit when all windows are closed, except on macOS. There, it's common\n-// for applications and their menu bar to stay active until the user quits\n-// explicitly with Cmd + Q.\n-app.on('window-all-closed', () => {\n-  if (process.platform !== 'darwin') {\n-    app.quit()\n-  }\n-})\n-\n-// In this file you can include the rest of your app\"s specific main process\n-// code. You can also put them in separate files and require them here.\n"
                },
                {
                    "date": 1702374396415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { app, shell, BrowserWindow } from 'electron'\n+import { app, shell, BrowserWindow, autoUpdater } from 'electron'\n import { join } from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import icon from '../../resources/icon.png?asset'\n import updater from './update'\n@@ -52,8 +52,9 @@\n   })\n \n   const main = createWindow()\n   updater(main)\n+  autoUpdater.checkForUpdates()\n \n   app.on('activate', function () {\n     // On macOS it's common to re-create a window in the app when the\n     // dock icon is clicked and there are no other windows open.\n"
                },
                {
                    "date": 1702374406838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n-import { app, shell, BrowserWindow, autoUpdater } from 'electron'\n+import { app, shell, BrowserWindow } from 'electron'\n import { join } from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import icon from '../../resources/icon.png?asset'\n import updater from './update'\n+import { autoUpdater } from 'electron-updater'\n \n function createWindow(): BrowserWindow {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n"
                }
            ],
            "date": 1702374319022,
            "name": "Commit-0",
            "content": "import { app, shell, BrowserWindow } from 'electron'\nimport { join } from 'path'\nimport { electronApp, optimizer, is } from '@electron-toolkit/utils'\nimport icon from '../../resources/icon.png?asset'\nimport updater from './update'\n\nfunction createWindow(): void {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 900,\n    height: 670,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === 'linux' ? { icon } : {}),\n    webPreferences: {\n      preload: join(__dirname, '../preload/index.js'),\n      sandbox: false\n    }\n  })\n\n  mainWindow.on('ready-to-show', () => {\n    mainWindow.show()\n  })\n\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url)\n    return { action: 'deny' }\n  })\n\n  // HMR for renderer base on electron-vite cli.\n  // Load the remote URL for development or the local html file for production.\n  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n  } else {\n    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))\n  }\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  electronApp.setAppUserModelId('com.electron')\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on('browser-window-created', (_, window) => {\n    optimizer.watchWindowShortcuts(window)\n  })\n\n  const main = createWindow()\n  updater(main)\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"
        }
    ]
}